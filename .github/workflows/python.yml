name: Python Code Quality Check

env:
  pythonLocation:

on:
  pull_request:
    types: [labeled]

permissions: write-all

jobs:
  build:
    if: github.event.label.description == 'Python Code Quality Check'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    name: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Checkout Pull Request
        run: |
          gh pr checkout ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get package name
        id: get-package-name
        run: |
          echo "PACKAGE_NAME=$(grep 'name' ./python-package/setup.py | sed -E 's/.*name\s*=\s*["'"'"']([^"'"'"']+)["'"'"'].*/\1/')" >> $GITHUB_OUTPUT
      - name: Get commit hash
        id: get-commit-hash
        run: |
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: set id
        id: set-job-id
        uses: ayachensiyuan/get-action-job-id@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          job-name: ${{ matrix.python-version }}
      - name: Set commit status - pending
        id: set-commit-status-action-start
        run: |
          commit_hash="${{ steps.get-commit-hash.outputs.COMMIT_HASH }}"
          test_tools=("Pylint" "Mypy" "Pytest")

          for test_tool in "${test_tools[@]}"; do
            gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${GITHUB_REPOSITORY}/statuses/$commit_hash \
            -f state='pending' \
            -f target_url="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/job/${{ steps.set-job-id.outputs.jobId }}" \
            -f description="${commit_hash:0:7}" \
            -f context='$test_tool'
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python ${{ matrix.python-version }}
        id: set-up-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pylint
            ./.mypy_cache
            ./.pytest_cache
            **/__pycache__/
            ${{ env.pythonLocation }}
            !${{ env.pythonLocation }}/**/site-packages/${{ steps.get-package-name.outputs.PACKAGE_NAME }}*/
          key: ${{ env.pythonLocation }}-${{ hashFiles('./python-package/setup.py') }}
      - run: pip install -e './python-package[test]'
      - name: Run pylint
        id: pylint
        run: |
          pylint python-package/ --rcfile=./.pylintrc | tee pylint.txt
          echo "PYLINT_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        continue-on-error: true
      - name: Run mypy
        id: mypy
        run: |
          mypy . --exclude /build --exclude __init__.py --ignore-missing-imports | tee mypy.txt
          echo "MYPY_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        continue-on-error: true
      - name: Run pytest
        id: pytest
        run: |
          pytest --cov=./python-package tests/ --cov-report=xml -m "not webtest" -c pytest.ini | tee pytest.txt
          echo "PYTEST_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        continue-on-error: true
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
